from PySide6.QtWidgets import QDialog, QLineEdit, QInputDialog, QSizePolicy, QMainWindow, QFileSystemModel, QTreeView, QWidget, QVBoxLayout, QLabel, QTreeWidget, QSplitter
from PySide6.QtCore import QDir, QSize, QModelIndex, QFile
from PySide6.QtGui import QIcon
from ui_mainwindow import Ui_MainWindow

class StartWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()

        self.last_move = []
        self.next_move = []
        self.currentDir = ''

        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle("File title")
        self.setGeometry(100, 100, 900, 600)

        self.filePath = self.ui.directory
        self.filePath.setText(f"Current: {QDir.root().dirName()}")

        self.dialog = QFileSystemModel(self)
        self.dialog.setRootPath(QDir.currentPath())
        self.dialog.rootPathChanged.connect(self.pathChanged)

        self.tree = QTreeView(self.ui.treeView)
        self.tree.resize(QSize(self.ui.treeView.width(), self.ui.treeView.height()))
        self.tree.setModel(self.dialog)
        self.tree.doubleClicked.connect(self.treeClicked)
        self.currentDir = QDir.root().dirName()
        self.tree.setRootIndex(self.dialog.index(self.currentDir))

        self.redo_btn = self.ui.redo_btn
        self.undo_btn = self.ui.undo_btn
        self.levelUp_btn = self.ui.up_btn
        self.update_move_btn()

        self.newFolder_btn = self.ui.newFolder_btn
        self.newFile_btn = self.ui.newFile_btn
        self.delete_btn = self.ui.delete_btn
        self.copy_btn = self.ui.copy_btn
        self.paste_btn = self.ui.paste_btn
        self.cut_btn = self.ui.cut_btn

        self.redo_btn.clicked.connect(self.redo)
        self.undo_btn.clicked.connect(self.undo)
        self.levelUp_btn.clicked.connect(self.parent)

        self.newFolder_btn.clicked.connect(self.newFolder)
        self.newFile_btn.clicked.connect(self.newFile)
        self.copy_btn.clicked.connect(self.copy)
        self.paste_btn.clicked.connect(self.paste)
        self.cut_btn.clicked.connect(self.cut)
        self.delete_btn.clicked.connect(self.delete)

    def newFolder(self):
        folderName, ok = QInputDialog.getText(self, "QInputDialog.getText()", "Folder name: ", QLineEdit.Normal)
        if ok:
            QDir(self.currentDir).mkdir(f"{folderName}")
        print('new folder')
    def newFile(self):

        # testName = QDialog(self)
        # testName.show()
        fileName, ok = QInputDialog.getText(self, "QInputDialog.getText()", "Folder name: ", QLineEdit.Normal)
        file = f"{self.currentDir}/{fileName}"
        print(file)
        with open(file, "w") as file:
            pass
        print('new file')
    def delete(self):
        index = self.tree.currentIndex()
        if index:
            file = self.tree.model().data(index)
            print(index.parent(), file)
        print('new delete')
    def copy(self):
        print('new copy')
    def cut(self):
        print('new cut')
    def paste(self):
        print('new paste')

    def pathChanged(self, path):
        print(path)

    def btn_clicked(self):
        print("clicked")

    def treeClicked(self, index):
        file = self.dialog.filePath(index)
        self.filePath.setText(f"Current: {file}")
        self.last_move.insert(0, self.currentDir)
        self.render_new_root(file)

    def parent (self):
        dirs = self.currentDir.split('/')
        if (len(dirs) == 1):
            self.render_new_root('')
        else:
            self.render_new_root(dirs[0])


    def undo (self):
        if (len(self.last_move) == 0): return
        last = self.last_move.pop(0)
        if (last is self.currentDir):
            if (not (self.currentDir in self.last_move) and not(self.currentDir in self.next_move)):
                self.next_move.insert(0, self.currentDir)
            if (not (last in self.next_move)):
                self.next_move.insert(0, last)
            last = self.last_move.pop(0)
        if (not (self.currentDir in self.last_move) and not(self.currentDir in self.next_move)):
            self.next_move.insert(0, self.currentDir)
        if (not (last in self.next_move)):
                self.next_move.insert(0, last)
        self.render_new_root(last)

    def redo (self):
        if (len(self.next_move) == 0): return
        next = self.next_move.pop(0)
        if (next is self.currentDir):
            if (not (next in self.last_move)):
                self.last_move.insert(0, next)
            next = self.next_move.pop(0)
        if (not (next in self.last_move)):
            self.last_move.insert(0, next)
        self.render_new_root(next)

    def render_new_root(self, dir):
        self.filePath.setText(f"Current: {dir}")
        self.tree.setRootIndex(self.dialog.index(dir))
        self.currentDir = dir
        print(f"last moves: {self.last_move}")
        print(f"next moves: {self.next_move}")

        self.update_move_btn()

    def update_move_btn(self):
        len_next = len(self.next_move)
        len_last = len(self.last_move)

        if (len_next == 0):
            self.redo_btn.setEnabled(False)
        else:
            self.redo_btn.setEnabled(True)

        if (len_last == 0):
            self.undo_btn.setEnabled(False)
        else:
            self.undo_btn.setEnabled(True)

        if (self.currentDir == ''):
            self.levelUp_btn.setEnabled(False)
        else:
            self.levelUp_btn.setEnabled(True)











